#include <iostream>
#include <queue>
#include <omp.h>
using namespace std;
class node {
public:
node* left;
node* right;
int data;
};
class Breadthfs {
public:
node* insert(node*, int);
void bfs(node*);
};
node* Breadthfs::insert(node* root, int data) {
if (!root) {
root = new node;
root->left = NULL;
root->right = NULL;
root->data = data;
return root;
}
queue<node*> q;
q.push(root);
while (!q.empty()) {
node* temp = q.front();
q.pop();
if (temp->left == NULL) {
temp->left = new node;
temp->left->left = NULL;
temp->left->right = NULL;
temp->left->data = data;
return root;
}
else {
q.push(temp->left);
}
if (temp->right == NULL) {
temp->right = new node;
temp->right->left = NULL;
temp->right->right = NULL;
temp->right->data = data;
return root;
}
else {
q.push(temp->right);

}
}
return root;
}
void Breadthfs::bfs(node* head) {
queue<node*> q;
q.push(head);
while (!q.empty()) {
int qSize = q.size();
#pragma omp parallel for
for (int i = 0; i < qSize; i++) {
node* currNode;
#pragma omp critical
{
currNode = q.front();
q.pop();
cout << "\t" << currNode->data;
}
if (currNode->left) {
#pragma omp critical
{
q.push(currNode->left);
}
}
if (currNode->right) {
#pragma omp critical
{
q.push(currNode->right);
}
}
}
}
}
int main() {
node* root = NULL;
int data;
char ans;
do {
cout << "\n enter data=>";
cin >> data;
Breadthfs bfsObj;
root = bfsObj.insert(root, data);
cout << "do you want insert one more node?";
cin >> ans;
} while (ans == 'y' || ans == 'Y');
Breadthfs bfsObj;
bfsObj.bfs(root);
return 0;
}

Output :
gescoe@gescoe-OptiPlex-3010:~/Prakash$ g++ -o gfg -fopenmp HPC1A.cpp
gescoe@gescoe-OptiPlex-3010:~/Prakash$ ./gfg
enter data=>1
do you want insert one more node?y
enter data=>7
do you want insert one more node?y
enter data=>3
do you want insert one more node?y
enter data=>9
do you want insert one more node?y
enter data=>5
do you want insert one more node?n
1 7 3 9 5
